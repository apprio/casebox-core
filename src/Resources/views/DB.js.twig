Ext.namespace('CB.DB');

CB.DB.themes = new Ext.data.ArrayStore({
    model: 'Generic2'
    ,data: [
        //['aria', 'Aria'] // loads data from http
        ['classic', 'Classic']
        //,['classic-sandbox', 'Classic Sandbox'] //bad
        ,['crisp', 'Crisp']
        ,['crisp-touch', 'Crisp Touch']
        ,['gray', 'Gray']
        ,['neptune', 'Neptune']
        ,['neptune-touch', 'Neptune touch']
    ]
});

CB.DB.yesno = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic'
    //,fields: [{name: 'id', type: 'int'}, 'name']
    ,data:  [[0, ' '], [-1, L.no], [1, L.yes]]
});

CB.DB.sex = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic2'
    //,fields: ['id', 'name']
    ,data:  [[null, '-'], ['m', L.male], ['f', L.female]]
});

CB.DB.notifyFor = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic2'
    //,fields: ['id', 'name']
    ,data:  [['all', 'All types'], ['mentioned', 'Only assigned and mentioning'], ['none', 'None']]
});

CB.DB.idleTimings = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic'
    ,data:  [[2, '2 Minutes'], [5, '5 Minutes'], [10, '10 Minutes'], [15, '15 Minutes'], [20, '20 Minutes'], [30, '30 Minutes'], [45, '45 Minutes'], [60, '1 hour']]
});

CB.DB.templateTypes = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic2'
    //,fields: ['id', 'name']
    ,data:  [[null, '-'], ['case', 'case'],['caseassessment', 'caseassessment'],['fidastub', 'fidastub'], ['comment', 'comment'], ['config', 'config'], ['email', 'email'], ['field', 'field'], ['file', 'file'], ['menu', 'menu'], ['object', 'object'], ['search', 'search'], ['shortcut', 'shortcut'], ['task', 'task'], ['template', 'template'], ['user', 'user']]
    ,getName: getStoreNames
});
CB.DB.fieldTypes = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic2'
    //,fields: ['id', 'name']
    ,data: {{fieldTypes|raw}}
    ,getName: getStoreNames
});
CB.DB.reminderTypes = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic'
    //,fields: [{name: 'id', type: 'int'}, 'name', 'iconCls']
    ,data:  [[1, L.byMail, 'icon-mail'], [2, L.bySystem, 'icon-bell']]
});
CB.DB.timeUnits = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic'
    //,fields: [{name: 'id', type: 'int'}, 'name']
    ,data:  [[1, L.ofMinutes], [2, L.ofHours], [3, L.ofDays], [4, L.ofWeeks]]
    ,getName: getStoreNames
});
CB.DB.shortDateFormats = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic2'
    //,fields: ['id', 'name']
    ,data:  [['m/d/Y', 'm/d/Y'], ['d/m/Y', 'd/m/Y'], ['d.m.Y', 'd.m.Y'], ['d-m-Y', 'd-m-Y']]
});
CB.DB.roles = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic'
    //,fields: [{name: 'id', type: 'int'}, 'name']
    ,data: {{roles|raw}}
});

CB.DB.phone_codes = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'PhoneCode'
    //,fields: [ 'code', 'name']
    ,data:  []
});
CB.DB.templatesIconSet = new Ext.data.ArrayStore({
    idIndex: 0
    ,model: 'Generic2'
    //,fields: ["id","name"]
    ,data: {{templatesIconSet|raw}}
});
CB.DB.languages = new Ext.data.ArrayStore({model: 'Language', data: {{languages|raw}}});

CB.DB.securityQuestions = new Ext.data.ArrayStore({model: 'SecurityQuestion',data: {{securityQuestions|raw}}});

{{templateStores|raw}}

reloadTemplates = function(){
    CB.DB.templates.reload({
        callback: function(){
            CB_Templates.getTemplatesStructure(function(r, e){
                Ext.iterate(CB.DB, function(k, st){
                    if (k.substr(0, 8) == 'template') {
                        var tid = k.substr(8);
                        if (!isNaN(tid)) {
                            st.removeAll();
                            if (r.data[tid]) {
                                st.loadData(r.data[tid]);
                            }
                        }
                    }
                })
            })
        }
    })
}

createDirectStores = function(){
    if (typeof(CB_Security) == 'undefined') {
        Ext.Function.defer(createDirectStores, 500);

        return;
    }

    CB.DB.templates = new Ext.data.DirectStore({
        autoLoad: true
        ,restful: false
        ,model: 'Template'
        ,proxy: {
            type: 'direct'
            ,paramsAsHash: true
            ,api: {
                read: CB_Templates.readAll
            }
            ,reader: {
                type: 'json'
                ,successProperty: 'success'
                ,idProperty: 'id'
                ,rootProperty: 'data'
                ,messageProperty: 'msg'
            }
        }

        ,writer: new Ext.data.JsonWriter({encode: false, writeAllFields: true})

        ,getName: getStoreTitles

        ,getIcon: function(id){
            var idx = this.findExact('id', parseInt(id))

            var rez = (idx >= 0)
                ? this.getAt(idx).get('iconCls')
                : '';

            return rez;
        }

        ,getType: function(id){
            var rec = this.findRecord('id', parseInt(id, 10), 0, false, false, true)

            return rec ? rec.get('type') : '';
        }

        ,getProperty: function(templateId, propertyName) {
            var idx = this.findExact('id', parseInt(templateId, 10))

            var rez = (idx >= 0)
                ? this.getAt(idx).get(propertyName)
                : '';

            return rez;
        }

        //check if children are accepted by config of the given template id
        //by default all templates accept children except for templates of type 'file'
        ,acceptChildren: function(templateId) {
            if (isNaN(templateId)) {
                return false;
            }

            var cfg = Ext.valueFrom(this.getProperty(templateId, 'cfg'), {})
                ,rez = (cfg.acceptChildren !== false);

            if (!Ext.isDefined(cfg.acceptChildren)) {
                rez = (this.getType(templateId) !== 'file');
            }

            return rez;
        }

    });

    CB.DB.usersStore =  new Ext.data.DirectStore({
        autoLoad: true
        ,model: 'User'
        ,proxy: {
            type: 'direct'
            ,paramsAsHash: true
            ,directFn: CB_Security.getActiveUsers
            ,reader: {
                type: 'json'
                ,successProperty: 'success'
                ,idProperty: 'id'
                ,rootProperty: 'data'
                ,messageProperty: 'msg'
            }
        }
        ,getName: getStoreNames
        ,getPhotoParam: function(id) {
            var idx = this.findExact('id', parseInt(id));

            var rez = (idx >= 0)
                ? this.getAt(idx).get('photo')
                : '';

            return rez;
        }
        ,getUserById: function(id) {
            var idx = this.findExact('id', parseInt(id));

            return (idx >= 0)
                ? this.getAt(idx).get('user')
                : '';
        }
        ,getIdByUser: function(user) {
            var idx = this.findExact('user', user);

            return (idx >= 0)
                ? this.getAt(idx).get('id')
                : null;
        }
    });
    App.on('userprofileupdated', function(userData, event){ CB.DB.usersStore.reload();});

    CB.DB.groupsStore =  new Ext.data.DirectStore({
        autoLoad: true
        ,autoSync: true
        ,model: 'Group'
        ,proxy: {
            type: 'direct'
            ,paramsAsHash: true
            ,api: {
                read: CB_Security.getUserGroups
                ,create: CB_Security.createUserGroup
                ,update: CB_Security.updateUserGroup
                ,destory: CB_Security.destroyUserGroup
            }
            ,reader: {
                type: 'json'
                ,successProperty: 'success'
                ,idProperty: 'id'
                ,rootProperty: 'data'
                ,messageProperty: 'msg'
            }
            ,writer: {
                type: 'json'
                ,rootProperty: 'data'
                ,encode: false
                ,writeAllFields: true
            }
        }
        ,sortInfo: {
            field: 'title'
            ,direction: 'ASC'
        }
        ,getItemName: getStoreTitles
    });

    CB.DB.usersGroupsSearchStore = new Ext.data.DirectStore({
        autoLoad: false
        ,autoDestroy: false
        ,model: 'Group'
        ,proxy: {
            type: 'direct'
            ,paramsAsHash: true
            ,directFn: CB_Security.searchUserGroups
            ,reader: {
                type: 'json'
                ,successProperty: 'success'
                ,idProperty: 'id'
                ,rootProperty: 'data'
                ,messageProperty: 'msg'
            }
        }
        ,sortInfo: {
            field: 'name'
            ,direction: 'ASC'
        }
        ,getName: getStoreTitles
    });

    CB.DB.countries = new Ext.data.DirectStore({
        autoLoad: false
        ,autoDestroy: false
        ,model: 'Country'
        ,proxy: {
            type: 'direct'
            ,paramsAsHash: true
            ,directFn: CB_System.getCountries
            ,reader: {
                successProperty: 'success'
                ,idProperty: 'id'
                ,rootProperty: 'data'
                ,messageProperty: 'msg'
            }
        }
        ,listeners: {
            load: function(st, recs, opts){
                pc = []
                for (i = 0; i < recs.length; i++) {
                    codes = String(recs[i].get('phone_codes')).split('|');
                    for(j = 0; j < codes.length; j++)
                    pc.push([codes[j], recs[i].get('name')+ ' ' + codes[j]]);
                }
                CB.DB.phone_codes.loadData(pc, false);
            }
        }
        ,getName: getStoreNames
         /*idx = CB.DB.countries.findExact('id', this.data.country_id);
        if (idx >= 0) {
            codes = CB.DB.countries.getAt(idx).get('phone_codes');
            codes = String(codes).split('|');
            if(!Ext.isEmpty(codes)) data.country_code = codes[0];
        }/**/
    });
    CB.DB.timezones = new Ext.data.DirectStore({
        autoLoad: false
        ,autoDestroy: false
        ,model: 'Timezone'
        ,proxy: {
            type: 'direct'
            ,paramsAsHash: true
            ,directFn: CB_System.getTimezones
            ,reader: {
                type: 'json'
                ,successProperty: 'success'
                ,idProperty: 'id'
                ,rootProperty: 'data'
                ,messageProperty: 'msg'
            }
        }
    });

};

Ext.Function.defer(createDirectStores, 500);

CB.DB.convertJsonReaderDates = function (jsonData) {
    if (jsonData && Ext.isArray(jsonData.data)) {
        for (var f = 0; f < this._model.fields.length; f++) {
            if (Ext.isObject(this._model.fields[f]) && (this._model.fields[f].type == 'date')) {
                var fn = this._model.fields[f].name;
                for (var i = 0; i < jsonData.data.length; i++) {
                    //detect if its task object
                    var isTask = false;
                    if (Ext.isDefined(jsonData.data[i]['template_id'])) {
                        isTask = (CB.DB.templates.getType(jsonData.data[i]['template_id']) == 'task');
                    }

                    if (!Ext.isEmpty(jsonData.data[i][fn])) {
                        //if is task then dates with empty time should not be shifted
                        var d = (isTask && (String(jsonData.data[i][fn]).substr(11, 8) == '00:00:00'))
                            ? new Date(jsonData.data[i][fn])
                            : date_ISO_to_local_date(jsonData.data[i][fn]);
                        jsonData.data[i][fn] = d;
                    }
                }
            }
        }
    }
}

function getThesauriStore(thesauriId)
{
    storeName = 'ThesauriStore'+thesauriId;
    if (!Ext.isDefined(CB.DB[storeName])) {
        data = CB.DB.thesauri.queryBy(function(record, id){ return (record.get('pid') == thesauriId); });
        CB.DB[storeName] = new Ext.data.ArrayStore({
            idIndex: 0
            ,fields: [{name:'id', type: 'int'}, {name:'pid', type: 'int'}, 'name', {name:'order', type: 'int'}, 'iconCls']
            ,data:  []
            ,getNames: getStoreNames
        });
        CB.DB[storeName].add([
            Ext.create(
                CB.DB[storeName].getModel().getName()
                ,{id: null, name: ''}
            )
        ]);
        CB.DB[storeName].add(data.items);/**/
    }

    return CB.DB[storeName];
}
